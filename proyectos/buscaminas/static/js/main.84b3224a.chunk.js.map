{"version":3,"sources":["bomba.png","Celda.js","FooterComponent.js","Tablero.js","Juego.js","serviceWorker.js","index.js"],"names":["module","exports","Celda","value","this","props","revelada","minada","celdaVecina","bandera","onClick","className","onContextMenu","estado","React","Component","Footer","href","target","Tablero","state","datosTablon","inicializar","altura","anchura","n_minas","estadoJuego","nMinasTotal","jugando","aux","Math","floor","random","minitas","map","fila","celda","push","banderitas","ocultas","vacio","pegarMina","obtenerCeldasVecinas","i","j","x","y","estaVacia","randomx","randomy","minasPuestas","generarAleatorio","contenidoActualizado","mina","consultarVecinas","aux2","setState","revelarCeldaVacia","contadorpuntos","revelarTablero","alert","cogerOcultas","length","cogerBanderas","e","preventDefault","cogerMinas","JSON","stringify","key","_handleClicarCelda","_handleBandera","id","class","window","location","reload","pintarTablero","Header","Navbar","dark","color","NavbarBrand","src","bomba","width","height","alt","Juego","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84b3224a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomba.030ae128.png\";","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n// Definimos el componente Celda, que tendra su estado, donde comprobaremos como se encuentra\r\nclass Celda extends React.Component {\r\n  estado() {\r\n    const { value } = this.props;\r\n    // Si no ha sido revelada y hacemos clic derecho con la bandera mostramos su valor\r\n    if (!value.revelada) {\r\n      return this.props.value.bandera ? \"üö©\" : null;\r\n    }\r\n    // Si esta minada devolvemos la bomba\r\n    if (value.minada) {\r\n      return \"üí£\";\r\n    }\r\n\r\n    // Si es no hay nada que devuelva nada\r\n    if (value.celdaVecina === 0) {\r\n      return null;\r\n    }\r\n    return value.celdaVecina;\r\n  }\r\n\r\n  // Pintamos la celda\r\n  render() {\r\n    const { value, onClick, bandera } = this.props;\r\n    // Declaramos esta clase que sera celda + oculta o minada o bandera dependiendo\r\n    var className = \"celda\" + (value.revelada ? \"\" : \" oculta\") + (value.minada ? \" minada\" : \"\") + (value.bandera ? \" bandera\" : \"\");\r\n    return (\r\n      <div onClick={onClick} className={className} onContextMenu={bandera}>\r\n        {this.estado()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Celda;","import React from 'react';\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './App.css';\n\nfunction Footer(props) {\n   return(\n   <div className=\"footer\">\n       <div className=\"container\">\n           <div className=\"row justify-content-center\">\n               <div className=\"col-4 offset-1 col-sm-2\">\n                   <h5>Men√∫</h5>\n                   <ul className=\"list-unstyled\">\n                       <li><a href=\"#\">Inicio</a></li>\n                       <li><a href=\"#\">Sobre m√≠</a></li>\n                       <li><a href=\"contacto.html\">Contacto</a></li>\n                   </ul>\n               </div>\n               <div className=\"col-7 col-sm-5\">\n                   <h5>¬øD√≥nde estoy?</h5>\n                   <address>\n \t             Calle Mina<br />\n \t             n¬∫ 8<br />\n \t             ANDALUC√çA<br />\n \t             <i className=\"fa fa-phone fa-lg\"></i>: +123456789<br />\n \t             <i className=\"fa fa-fax fa-lg\"></i>: +123456789<br />\n \t             <i className=\"fa fa-envelope fa-lg\"></i>: <a href=\"mailto:rafaelcarrillobonilla@gmail.com\">\n                        rafaelcarrillobonilla@gmail.com</a>\n                   </address>\n               </div>\n               <div className=\"col-12 col-sm-4 align-self-center\">\n               \n                   <div className=\"text-center\">\n                       \n                       <a className=\"btn btn-social-icon btn-facebook\" href=\"#\"><i className=\"fa fa-facebook\"></i></a>\n                       <a className=\"btn btn-social-icon btn-linkedin\" target=\"_blank\" href=\"https://www.linkedin.com/in/rafael-carrillo-bonilla-a6a3bb177/\"><i className=\"fa fa-linkedin\"></i></a>\n                       <a className=\"btn btn-social-icon btn-twitter\" href=\"#\"><i className=\"fa fa-twitter\"></i></a>\n                       <a className=\"btn btn-social-icon btn-google\" href=\"#\"><i className=\"fa fa-youtube\"></i></a>\n                       \n                   </div>\n               </div>\n\n           </div>\n           <div className=\"row justify-content-center\">\n               <div className=\"col-auto\">\n                   <p><strong>RAFAEL CARRILLO BONILLA</strong></p>\n               </div>\n           </div>\n       </div>\n   </div>\n   )\n}\n\nexport default Footer;","import React, { Component } from 'react';\r\nimport Celda from './Celda.js';\r\nimport './App.css';\r\nimport {Navbar,NavbarBrand} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Footer from './FooterComponent.js';\r\nimport bomba from \"./bomba.png\";\r\n\r\n// Definimos el componente Tablero con su estado, sus puntos, sus minas y su inicilizacion\r\nclass Tablero extends React.Component {\r\n    state = {\r\n          datosTablon: this.inicializar(this.props.altura, this.props.anchura, this.props.n_minas),\r\n          estadoJuego: \"EN JUEGO üéÆ\",\r\n          nMinasTotal: this.props.n_minas,\r\n          jugando:0,\r\n      };\r\n  \r\n\r\n      // Funci√≥n para obtener un n√∫mero aleatorio dada una dimension del tablero\r\n      generarAleatorio(aux) {\r\n        return Math.floor((Math.random() * 1000) + 1) % aux;\r\n      }\r\n\r\n      // Funci√≥n para obtener las minas de las celdas, donde recorremos las celdas y las metemos en un array\r\n      // si se encuentran con una mina\r\n      cogerMinas(aux) {\r\n          var minitas = [];\r\n          aux.map(fila => {\r\n              fila.map((celda) => {\r\n                  if (celda.minada) {\r\n                      minitas.push(celda);\r\n                  }\r\n              });\r\n          });\r\n          return minitas;\r\n      }\r\n\r\n  \r\n      // Funci√≥n para obtener las banderas, que funciona de las misma manera que la funci√≥n de arriba de coger las minas\r\n      cogerBanderas(aux) {\r\n          var banderitas = [];\r\n          aux.map(fila => {\r\n              fila.map((celda) => {\r\n                  if (celda.bandera) {\r\n                    banderitas.push(celda);\r\n                  }\r\n              });\r\n          });\r\n          return banderitas;\r\n      }\r\n  \r\n      // Funci√≥n para obtener las celdas ocultas, que funciona de la misma manera que la funci√≥n de arriba de coger las minas\r\n      cogerOcultas(aux) {\r\n          var ocultas = [];\r\n          aux.map(fila => {\r\n              fila.map((celda) => {\r\n                  if (!celda.revelada) {\r\n                      ocultas.push(celda);\r\n                  }\r\n              });\r\n          });\r\n          return ocultas;\r\n      }\r\n  \r\n\r\n      // Funci√≥n para obtener el tablero inicial donde inicializamos con las minas y sus adyacentes\r\n      inicializar(altura, anchura, n_minas) {\r\n          var aux = this.vacio(altura, anchura);\r\n          aux = this.pegarMina(aux, altura, anchura, n_minas);\r\n          aux = this.obtenerCeldasVecinas(aux, altura, anchura);\r\n          return aux;\r\n      }\r\n\r\n      vacio(altura, anchura) {\r\n          var aux = [];  \r\n          for (var i = 0; i < altura; i++) {\r\n              aux.push([]);\r\n              for (var j = 0; j < anchura; j++) {\r\n                aux[i][j] = {x: i, y: j, minada: false, celdaVecina: 0, revelada: false, estaVacia: false, bandera: false,};\r\n              }\r\n          }\r\n          return aux;\r\n      }\r\n  \r\n      // Funci√≥n para pintar las minas en el tablero\r\n      pegarMina(aux, altura, anchura, n_minas) {\r\n          var randomx, randomy, minasPuestas = 0;\r\n          while (minasPuestas < n_minas) {\r\n              randomx = this.generarAleatorio(anchura);\r\n              randomy = this.generarAleatorio(altura);\r\n              if (!(aux[randomx][randomy].minada)) {\r\n                aux[randomx][randomy].minada = true;\r\n                  minasPuestas++;\r\n              }\r\n          }\r\n          return (aux);\r\n      }\r\n  \r\n      // Funci√≥n para obtener el n√∫mero de minas vecinas para cada celda del tablero\r\n      obtenerCeldasVecinas(aux, altura, anchura) {\r\n          var contenidoActualizado = aux, index = 0;\r\n  \r\n          for (var i = 0; i < altura; i++) {\r\n              for (var j = 0; j < anchura; j++) {\r\n                  if (aux[i][j].minada !== true) {\r\n                      var mina = 0;\r\n                      const area = this.consultarVecinas(aux[i][j].x, aux[i][j].y, aux);\r\n                      area.map(value => {\r\n                          if (value.minada) {\r\n                              mina++;\r\n                          }\r\n                      });\r\n                      if (mina === 0) {\r\n                          contenidoActualizado[i][j].estaVacia = true;\r\n                      }\r\n                      contenidoActualizado[i][j].celdaVecina = mina;\r\n                  }\r\n              }\r\n          }\r\n          return (contenidoActualizado);\r\n      };\r\n  \r\n      // Funci√≥n para buscar las celdas vecinas y devolverlas\r\n      consultarVecinas(x, y, aux) {\r\n          const aux2 = [];\r\n          // Arriba\r\n          if (x > 0) {\r\n            aux2.push(aux[x - 1][y]);\r\n          }\r\n          // Abajo\r\n          if (x < this.props.altura - 1) {\r\n            aux2.push(aux[x + 1][y]);\r\n          }\r\n          // Izquierda\r\n          if (y > 0) {\r\n            aux2.push(aux[x][y - 1]);\r\n          }\r\n          // Derecha\r\n          if (y < this.props.anchura - 1) {\r\n            aux2.push(aux[x][y + 1]);\r\n          }\r\n          // Esquina superior izquierda\r\n          if (x > 0 && y > 0) {\r\n            aux2.push(aux[x - 1][y - 1]);\r\n          }\r\n          // Esquina superior derecha\r\n          if (x > 0 && y < this.props.anchura - 1) {\r\n            aux2.push(aux[x - 1][y + 1]);\r\n          }\r\n          // Esquina inferior derecha\r\n          if (x < this.props.altura - 1 && y < this.props.anchura - 1) {\r\n            aux2.push(aux[x + 1][y + 1]);\r\n          }\r\n          // Esquina inferior izquierda\r\n          if (x < this.props.altura - 1 && y > 0) {\r\n            aux2.push(aux[x + 1][y - 1]);\r\n          }\r\n          return aux2;\r\n      }\r\n  \r\n      // Funci√≥n para revelar todo el tablero y luego actualizamos la informacion con ayuda del setState\r\n      revelarTablero() {\r\n          var contenidoActualizado = this.state.datosTablon;\r\n          contenidoActualizado.map((fila) => {\r\n              fila.map((celda) => {\r\n                  celda.revelada = true;\r\n              });\r\n          });\r\n          this.setState({\r\n            datosTablon: contenidoActualizado\r\n          })\r\n      }\r\n  \r\n      // Funci√≥n para revelar el procedimiento l√≥gico de la celda vac√≠a\r\n      revelarCeldaVacia(x, y, aux) {\r\n          var area = this.consultarVecinas(x, y, aux);\r\n          area.map(value => {\r\n              if (!value.bandera && !value.revelada && (value.estaVacia || !value.minada)) {\r\n                aux[value.x][value.y].revelada = true;\r\n                  if (value.estaVacia) {\r\n                      this.revelarCeldaVacia(value.x, value.y, aux);\r\n                  }\r\n              }\r\n          });\r\n          return aux;\r\n  \r\n      }\r\n  \r\n      // Evento de hacer clic en la celda\r\n      _handleClicarCelda(x, y) {\r\n        var contadorpuntos = this.state.jugando;\r\n          // Comprueba si ha sido revelada\r\n          if (this.state.datosTablon[x][y].revelada || this.state.datosTablon[x][y].bandera) \r\n          {  \r\n            return null;\r\n          }\r\n          // Comprueba si esta minada, en caso de estarlo, se acaba la partida\r\n          if (this.state.datosTablon[x][y].minada) {\r\n              // Cambiamos y mostramos el mensaje de que ha perdido\r\n              this.setState({estadoJuego: \"¬°HAS PERDIDO! üò±\"});\r\n              this.revelarTablero();\r\n              alert(\"¬°HAS PERDIDO! üò±\");\r\n          }\r\n  \r\n          var contenidoActualizado = this.state.datosTablon;\r\n          contenidoActualizado[x][y].bandera = false;\r\n          contenidoActualizado[x][y].revelada = true;\r\n  \r\n          // Si esta vac√≠a vamos sumando mas puntos\r\n          if (contenidoActualizado[x][y].estaVacia) {\r\n              contenidoActualizado = this.revelarCeldaVacia(x, y, contenidoActualizado);\r\n              contadorpuntos+=80;\r\n          }\r\n  \r\n          // Si el n√∫mero de minas es igual a las ocultas, quiere decir que ha ganado\r\n          if (this.cogerOcultas(contenidoActualizado).length === this.props.n_minas) {\r\n              // Cambiamos y mostramos el mensaje de que ha ganado\r\n              this.setState({nMinasTotal: 0, estadoJuego: \"¬°ENHORABUENA, HAS GANADO! üèÜ\"});\r\n              this.revelarTablero();\r\n              alert(\"¬°ENHORABUENA, HAS GANADO! üèÜ\");\r\n          }\r\n\r\n          // Vamos sumando puntos por cada clic\r\n          contadorpuntos++;\r\n          \r\n          this.setState({\r\n            datosTablon: contenidoActualizado,\r\n              jugando: contadorpuntos,\r\n              nMinasTotal: this.props.n_minas - this.cogerBanderas(contenidoActualizado).length,\r\n          });\r\n      }\r\n  \r\n      // Evento de la bandera\r\n      _handleBandera(e, x, y) {\r\n          e.preventDefault();\r\n          var contadorpuntos = this.state.jugando;\r\n          var contenidoActualizado = this.state.datosTablon;\r\n          var n_minas = this.state.nMinasTotal;\r\n  \r\n          // Comprueba si se han revelado\r\n          if (contenidoActualizado[x][y].revelada) {    \r\n              return;\r\n          }\r\n          // Si no matado una bomba la sumamos\r\n          if (contenidoActualizado[x][y].bandera) {\r\n              contenidoActualizado[x][y].bandera = false;\r\n              n_minas++;\r\n          // Si ha puesto una bandera, la restamos               \r\n          } else {\r\n              contenidoActualizado[x][y].bandera = true;\r\n              n_minas--;     \r\n          }\r\n          if (n_minas === 0) {\r\n              const minitas = this.cogerMinas(contenidoActualizado);\r\n              const banderitas = this.cogerBanderas(contenidoActualizado);\r\n              // Si las minas y banderas son iguales, establecemos que ha ganado y revelamos el tablero\r\n              if (JSON.stringify(minitas) === JSON.stringify(banderitas)) {\r\n                  this.setState({nMinasTotal: 0, estadoJuego: \"¬°ENHORABUENA, HAS GANADO!\"});\r\n                  this.revelarTablero();\r\n                  alert(\"¬°ENHORABUENA, HAS GANADO!\");\r\n              }\r\n          }\r\n  \r\n          // Actualizamos los datos del tablero, las minas y los puntos\r\n          this.setState({\r\n            datosTablon: contenidoActualizado,\r\n            nMinasTotal: n_minas,\r\n            jugando: contadorpuntos,\r\n          });\r\n      }\r\n  \r\n      // Funci√≥n para pintar el tablero donde ya llamamos el componente Celda y lo pintamos\r\n      pintarTablero(aux) {\r\n          return aux.map((fila) => {\r\n              return fila.map((celda) => {\r\n                  return (\r\n                      <div key={celda.x * fila.length + celda.y}>\r\n                          <Celda\r\n                              onClick={() => this._handleClicarCelda(celda.x, celda.y)}\r\n                              bandera={(e) => this._handleBandera(e, celda.x, celda.y)}\r\n                              value={celda}\r\n                          />\r\n                          {(fila[fila.length - 1] === celda) ? <div className=\"clear\" /> : \"\"}\r\n                      </div>\r\n                      );\r\n              })\r\n          });\r\n  \r\n      }\r\n  \r\n    // Pintamos todo empezando por el Header, luego el panel de informaci√≥n, luego la tabla y por √∫ltimo el footer\r\n    render() {\r\n          return (\r\n              <div>\r\n                  <Header/>\r\n                  <div id=\"panel\" > \r\n                        <h2 className=\"info\">{this.state.estadoJuego}</h2>\r\n                        <button class=\"btn btn-primary\">Minas: {this.state.nMinasTotal}</button>&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <button class=\"btn btn-warning\">Puntos: {this.state.jugando}</button>\r\n                        <br/><br/>\r\n                        <button class=\"btn btn-danger\" onClick={() => window.location.reload(false)}>Reiniciar</button>  \r\n                  </div>\r\n                  <center>\r\n                  <div id=\"tablita\">\r\n                  {    \r\n                      this.pintarTablero(this.state.datosTablon)\r\n                  }\r\n                 </div> \r\n                 </center>\r\n                <Footer/> \r\n              </div>\r\n              \r\n          );\r\n      }\r\n  }\r\n\r\n  // Definimos el componente Header para usarlo luego al pintar\r\n  class Header extends React.Component {\r\n    render(){\r\n        return(\r\n            \r\n            <Navbar dark color=\"warning\">\r\n            <div className=\"navbar-start\">\r\n              <NavbarBrand><img src={bomba} width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\"/> <span class=\"titulo\">BUSCAMINAS EN REACTJS</span></NavbarBrand>\r\n            </div>\r\n          </Navbar>\r\n          \r\n        )\r\n    }\r\n}\r\n\r\n  export default Tablero;","import React, { Component } from 'react';\nimport './App.css';\nimport Tablero from './Tablero.js';\n\n\n// Definimos el componente Juego con la anchura y altura del tablero y el n√∫mero de minas\nclass Juego extends React.Component {\n  state = {\n    altura: 10,\n    anchura: 10,\n    n_minas: 10,\n  };\n\n  // Pintamos el componente Tablero con sus dimensiones y sus numeros de minas\n  render() {\n    const {altura,anchura,n_minas} = this.state;\n    return (\n \n       \n        <Tablero altura={altura} anchura={anchura} n_minas={n_minas} /> \n       \n    );\n   \n  }\n \n}\n\nexport default Juego;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Juego from './Juego';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Juego />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}